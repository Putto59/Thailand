# main_buddhochain.py (ชื่อไฟล์ที่คุณสามารถบันทึกได้)

from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy import create_engine, Column, Integer, String, Boolean, ForeignKey
from sqlalchemy.orm import sessionmaker, relationship, Session
from sqlalchemy.ext.declarative import declarative_base
from passlib.context import CryptContext
from datetime import datetime, timedelta
from jose import JWTError, jwt
from pydantic import BaseModel, EmailStr
from typing import List, Optional

# --- 1. Database Setup (src/database.py) ---
SQLALCHEMY_DATABASE_URL = "sqlite:///./buddhochain.db"
# สำหรับ PostgreSQL (ถ้าใช้):
# SQLALCHEMY_DATABASE_URL = "postgresql://user:password@host:port/dbname"

engine = create_engine(
    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --- 2. Models (src/models.py) ---
class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    is_active = Column(Boolean, default=True)
    is_admin = Column(Boolean, default=False)

    journals = relationship("Journal", back_populates="owner")

    def __repr__(self):
        return f"<User(username='{self.username}', email='{self.email}')>"

class Journal(Base):
    __tablename__ = "journals"
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    content = Column(String)
    owner_id = Column(Integer, ForeignKey("users.id"))

    owner = relationship("User", back_populates="journals")

# --- 3. Schemas (src/schemas.py) ---
class UserBase(BaseModel):
    username: str
    email: EmailStr

class UserCreate(UserBase):
    password: str

class UserLogin(BaseModel):
    username: str
    password: str

class UserInDB(UserBase):
    hashed_password: str
    is_active: bool
    is_admin: bool

    class Config:
        orm_mode = True

class Token(BaseModel):
    access_token: str
    token_type: str

# Journal Schemas
class JournalBase(BaseModel):
    title: str
    content: str

class JournalCreate(JournalBase):
    pass

class Journal(JournalBase):
    id: int
    owner_id: int

    class Config:
        orm_mode = True

# --- 4. Auth Utils (src/utils/auth.py) ---
SECRET_KEY = "your_secret_key_here_for_dev_only" # *** เปลี่ยนใน Production! ***
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def decode_access_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload
    except JWTError:
        return None

# --- 5. Dependencies (src/dependencies.py) ---
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")

def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)) -> User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )

    payload = decode_access_token(token)
    if payload is None:
        raise credentials_exception

    username: str = payload.get("sub")
    if username is None:
        raise credentials_exception

    user = db.query(User).filter(User.username == username).first()
    if user is None:
        raise credentials_exception

    return user

# --- 6. FastAPI App (src/main.py) ---
app = FastAPI(
    title="Buddhochain API",
    description="API for Buddhochain project, focusing on decentralised spiritual journals and karma tracking.",
    version="0.1.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# สร้างตารางในฐานข้อมูล (สำหรับการพัฒนาเท่านั้น, ใน Production ใช้ Alembic)
@app.on_event("startup")
def on_startup():
    Base.metadata.create_all(bind=engine)

# --- 7. Auth Router (src/routers/auth.py) ---
auth_router = FastAPI.APIRouter(
    prefix="/auth",
    tags=["auth"]
)

@auth_router.post("/register", response_model=UserBase)
def register_user(user_data: UserCreate, db: Session = Depends(get_db)):
    existing_user = db.query(User).filter(
        (User.username == user_data.username) | (User.email == user_data.email)
    ).first()

    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Username or email already registered"
        )

    hashed_password = get_password_hash(user_data.password)

    new_user = User(
        username=user_data.username,
        email=user_data.email,
        hashed_password=hashed_password
    )

    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    return new_user

@auth_router.post("/login", response_model=Token)
def login_user(user_data: UserLogin, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == user_data.username).first()

    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid username or password"
        )

    if not verify_password(user_data.password, user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid username or password"
        )

    access_token = create_access_token(data={"sub": user.username})

    return {"access_token": access_token, "token_type": "bearer"}

# --- 8. Journals Router (src/routers/journals.py) ---
journals_router = FastAPI.APIRouter(
    prefix="/journals",
    tags=["journals"]
)

@journals_router.post("/", response_model=Journal)
def create_journal(
    journal: JournalCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    db_journal = Journal(
        title=journal.title,
        content=journal.content,
        owner_id=current_user.id
    )
    db.add(db_journal)
    db.commit()
    db.refresh(db_journal)
    return db_journal

@journals_router.get("/", response_model=List[Journal])
def read_user_journals(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    journals = db.query(Journal).filter(
        Journal.owner_id == current_user.id
    ).all()
    return journals

@journals_router.get("/{journal_id}", response_model=Journal)
def read_journal(
    journal_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    journal = db.query(Journal).filter(
        Journal.id == journal_id,
        Journal.owner_id == current_user.id
    ).first()
    if journal is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Journal not found or you don't have permission"
        )
    return journal

# --- 9. Register Routers to Main App ---
app.include_router(auth_router)
app.include_router(journals_router)

# --- Basic Health Check Endpoints ---
@app.get("/")
def read_root():
    return {"message": "Welcome to Buddhochain API! API is running."}

@app.get("/healthcheck")
def healthcheck():
    return {"status": "ok", "message": "Buddhochain API is healthy!"}

